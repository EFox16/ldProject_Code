#!/usr/bin/python

"""Model selection using AIC values. Data is an exponential curve. Models are exponential, gamma, and polynomial"""

___author__ = "Emma Fox (e.fox16@imperial.ac.uk)"
__version__ = "0.0.1"

##IMPORTS
from lmfit import minimize, Minimizer, Parameters, Parameter, report_fit, fit_report
import numpy as np
import matplotlib.pyplot as plt

#Create data
x = np.linspace(0, 3, 50)
data = 20*np.exp(-1.5*x) + np.random.normal(size=len(x), scale=0.1)

#Plot data
plt.plot(x, data, 'ro', label="Original Data")
plt.show()

##FUNCTIONS

#Exponential Model######################################################
def EXP(paramsEXP, x, data):
	"""Modeling the reverse exponential decay"""
	init = paramsEXP['init']
	lam = paramsEXP['lam']
	model = init * np.exp(-lam * x)
	return model - data

#Create parameter set
paramsEXP = Parameters()
paramsEXP.add('init', value= 19, max=20)
paramsEXP.add('lam', value=2)

#Fit with least squares
resultEXP = minimize(EXP, paramsEXP, args=(x,), kws={'data':data})



#Gamma Model############################################################
def GAM(paramsGAM, x, data):
	"""Gamma function"""
	k = paramsGAM['k']
	t = paramsGAM['t']
	model = np.exp(-x * k) * x**t
	return model - data

#Create parameter set
paramsGAM = Parameters()
paramsGAM.add('k', value=0)
paramsGAM.add('t', value=0)

#Fit with least squares
resultGAM = minimize(GAM, paramsGAM, args=(x,), kws={'data':data})



#Polynomial Model#######################################################
def POLY(paramsPOLY, x, data):
	"""Polynomial function"""
	a = paramsPOLY['a']
	b = paramsPOLY['b']
	c = paramsPOLY['c']
	model = a*x**2 + b*x + c
	return model - data

#Create parameter set
paramsPOLY = Parameters()
paramsPOLY.add('a', value=1)
paramsPOLY.add('b', value=1)
paramsPOLY.add('c', value=1)

#Fit with least squares
resultPOLY = minimize(POLY, paramsPOLY, args=(x,), kws={'data':data})

#Choosing###############################################################
WORK IN PROGRESS
#Plotting
finalEXP = data + resultEXP.residual
finalPOLY = data + resultPOLY.residual

plt.plot(x, data, 'ro', label="original data")
plt.plot(x, finalEXP, label="exp line")
plt.plot(x, finalPOLY, label="poly line")
plt.show()

#Pick AIC
try:
	LowestAIC=min(resultEXP.aic, resultGAM.aic, resultPOLY.aic)
	if LowestAIC=resultEXP.aic:
		print resultEXP.params
	if LowestAIC=resultGAM.aic:
		print resultGAM.params
	if LowestAIC=resultPOLY.aic:
		print resultPOLY.params
except:
	LowestAIC=min(resultEXP.aic, resultPOLY.aic)
	if LowestAIC=resultEXP.aic:
		print resultEXP.params
	if LowestAIC=resultPOLY.aic:
		print resultPOLY.params

ModelT=[resultEXP, resultGAM, resultPOLY]
ModelList=["resultEXP", "resultPOLY"]
for ResultName in ModelList:
	if LowestAIC==ResultName.aic:
		FitParams==ResultName.params
		return FitParams
		
