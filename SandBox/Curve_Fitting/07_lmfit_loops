#!/usr/bin/python

"""Fits an exponential, gamma, and polynomial function to a data set. FILE NAME INPUT REQUIRED"""

___author__ = "Emma Fox (e.fox16@imperial.ac.uk)"
__version__ = "0.0.1"

########################################################################
# IMPORTS                                                              #
########################################################################

import sys
from lmfit import minimize, Minimizer, Parameters, Parameter, report_fit, fit_report
import numpy as np
import matplotlib.pyplot as plt
import pylab

########################################################################
# LOAD DATA                                                            #
########################################################################
ldFile = open(sys.argv[1])

BPDist,r2Pear,D,DPrime,r2GLS=np.loadtxt(ldFile, usecols=(2,3,4,5,6), unpack=True)

x=BPDist
data=r2Pear

########################################################################
# CREATE MODELS                                                        #
########################################################################
##EXPONENTIAL FUNCTION & PARAMETERS
def EXP(paramsEXP, x, data):
	"""Modeling the reverse exponential decay"""
	init = paramsEXP['init']
	lam = paramsEXP['lam']
	model = init * np.exp(-lam * x)
	return model - data

paramsEXP = Parameters()
paramsEXP.add('init', value=1, max=1)
paramsEXP.add('lam', value=2)

##GAMMA FUNCTION & PARAMETERS
def GAM(paramsGAM, x, data):
	"""Polynomial function"""
	k = paramsGAM['k']
	t = paramsGAM['t']
	model = np.exp(-x * k) * x**t
	return model - data

#Create parameter set
paramsGAM = Parameters()
paramsGAM.add('k', value=1)
paramsGAM.add('t', value=1)

##POLYNOMIAL FUNCTION & PARAMETERS
def POLY(paramsPOLY, x, data):
	"""Polynomial function"""
	a = paramsPOLY['a']
	b = paramsPOLY['b']
	c = paramsPOLY['c']
	model = a*x**2 + b*x + c
	return model - data

paramsPOLY = Parameters()
paramsPOLY.add('a', value=1)
paramsPOLY.add('b', value=1)
paramsPOLY.add('c', value=1)

########################################################################
# FIT AND PLOT                                                         #
########################################################################
##FIT WITH LEAST SQUARES 
try:
	for modelNAME in ['EXP', 'GAM', 'POLY']:
		print modelNAME
		result = minimize('%s', 'params%s', args=(x,), kws={'data':data}) % modelNAME
		print(fit_report(result))
except:
	pass
	


paramsNAME='params%s' % modelNAME
	resultNAME='result%s' % modelNAME
	lineNAME='line%s' % modelNAME

##PLOT LINES	
for modelNAME in ['EXP', 'GAM', 'POLY']:	
	


try:
	resultEXP = minimize(EXP, paramsEXP, args=(x,), kws={'data':data})
except:
	pass

	
########################################################################
# GAMMA FUNCTION                                                       #
########################################################################

#Fit with least squares
try:
	resultGAM = minimize(GAM, paramsGAM, args=(x,), kws={'data':data})
except:
	pass
	
	
########################################################################
# POLYNOMIAL FUNCTION                                                  #
########################################################################

#Create parameter set


#Fit with least squares
try:
	resultPOLY = minimize(POLY, paramsPOLY, args=(x,), kws={'data':data})
except:
	pass
	
########################################################################
# EXAMINE OUTPUT                                                       #
########################################################################

try:
	report_fit(resultEXP)
except:
	pass
try:
	report_fit(resultGAM)
except:
	pass
try:
	report_fit(resultPOLY)
except:
	pass

########################################################################
# PLOT LINES                                                           #
########################################################################
try:
	modelEXP = data + resultEXP.residual
except:
	pass
try:
	modelGAM = data + resultGAM.residual
except:
	pass
try:
	modelPOLY = data + resultPOLY.residual
except:
	pass		


pylab.plot(x, data, 'k.')
try:
	pylab.plot(x, modelEXP, 'r')
except:
	pass	
try:
	pylab.plot(x, modelGAM, 'g')
except:
	pass
try:
	pylab.plot(x, modelPOLY, 'b')
except:
	pass

pylab.show()
